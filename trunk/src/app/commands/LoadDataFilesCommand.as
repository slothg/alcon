package commands{	import io.DataFileLoader;		import com.hexagonstar.env.command.Command;	import com.hexagonstar.env.command.ICommandListener;		import flash.events.ErrorEvent;	import flash.events.Event;			/**	 * LoadDataFilesCommand Class	 * @author Sascha Balkau	 */	public class LoadDataFilesCommand extends Command	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private var _dataLoader:DataFileLoader;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new LoadDataFilesCommand instance.		 */		public function LoadDataFilesCommand(listener:ICommandListener)		{			super(listener);		}						/**		 * Execute the command.		 */ 		override public function execute():void		{			super.execute();						_dataLoader = new DataFileLoader();			_dataLoader.addEventListener(Event.COMPLETE, onComplete);			_dataLoader.addEventListener(ErrorEvent.ERROR, onError);			_dataLoader.load();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				override public function get name():String		{			return "loadDataFiles";		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @private		 */		private function onComplete(e:Event):void		{			complete();		}						/**		 * @private		 */		private function onError(e:ErrorEvent):void		{			/* Since DataLoader might load more than one file we don't proceed			 * to finish() but wait for a Complete event from the loader. */			notifyError(e.text);			complete();		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * finish		 * @private		 */		override protected function complete():void		{			_dataLoader.removeEventListener(Event.COMPLETE, onComplete);			_dataLoader.removeEventListener(ErrorEvent.ERROR, onError);			_dataLoader.dispose();			_dataLoader = null;						super.complete();		}	}}