/* * Alcon - ActionScript Logging & Debugging Console. * * Licensed under the MIT License * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package commands{	import managers.KeyManager;		import model.Config;		import com.hexagonstar.env.command.Command;	import com.hexagonstar.env.command.ICommandListener;	import com.hexagonstar.env.console.Console;	import com.hexagonstar.io.key.Key;		/**	 * InitKeyManagerCommand Class	 * @author Sascha Balkau	 */	public class InitKeyManagerCommand extends Command	{		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new InitKeyManagerCommand instance.		 */		public function InitKeyManagerCommand(listener:ICommandListener)		{			super(listener);		}						/**		 * Execute the command.		 */ 		override public function execute():void		{			super.execute();						//var keyString:String = Config.instance.consoleKey;			//var keyCodes:Array = Key.getKeyCodes(keyString);			//var km:KeyManager = KeyManager.instance;						//km.clearAssignments();			//km.assignKeyCombination(keyCodes, Console.instance.toggle);						complete();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				override public function get name():String		{			return "initKeyManager";		}						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * finish		 * @private		 */		override protected function complete():void		{			super.complete();		}	}}