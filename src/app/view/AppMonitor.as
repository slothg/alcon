/* * Alcon - ActionScript Logging & Debugging Console. * * Licensed under the MIT License * Copyright (c) 2009 Sascha Balkau / Hexagon Star Softworks *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package view{	import view.components.AppMonitorGraph;
	import view.components.AppMonitorInfoDisplay;
	
	import mx.containers.HBox;
	import mx.core.ScrollPolicy;	
	
	/**	 * AppMonitor Class	 * @author Sascha Balkau <sascha@hexagonstar.com>	 */	public class AppMonitor extends HBox	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				private static var _instance:AppMonitor;				private var _infoDisplay:AppMonitorInfoDisplay;		private var _graph:AppMonitorGraph;				////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AppMonitor instance.		 */		public function AppMonitor()		{			super();						if (_instance)			{				throw new Error("Tried to instantiate AppMonitor through"					+ " it's constructor. Use AppMonitor.instance instead!");			}		}						/**		 * init		 */		public function init():void		{			_infoDisplay.init();			_graph.init();						reset();		}				/**		 * start		 */		public function start():void		{		}				/**		 * tick		 */		public function tick(fps:int, framerate:int, frt:int, mem:int):void		{			_infoDisplay.tick(fps, framerate, frt, mem);			_graph.tick(fps, framerate, frt, mem);		}						/**		 * mark		 */		public function mark(color:uint):void		{			_graph.mark(color);		}						/**		 * Updates the AppMonitor when options were changed.		 */		public function update():void		{			_infoDisplay.update();			_graph.update();		}						/**		 * resize		 */		public function resize():void		{			_infoDisplay.resize();			_graph.resize();		}						/**		 * reset		 */		public function reset():void		{			_infoDisplay.reset();			_graph.reset();		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the Singleton instance of AppMonitor.		 */		public static function get instance():AppMonitor		{			if (!_instance) _instance = new AppMonitor();			return _instance;		}						////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////						////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * createChildren		 * @private		 */		override protected function createChildren():void		{			super.createChildren();						percentWidth = 100;			horizontalScrollPolicy = ScrollPolicy.OFF;			verticalScrollPolicy = ScrollPolicy.OFF;						_infoDisplay = new AppMonitorInfoDisplay();			addChild(_infoDisplay);						_graph = new AppMonitorGraph();			addChild(_graph);		}	}}